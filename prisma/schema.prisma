generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  revoked   Boolean  @default(false)

  //clave foranea
  userId    String

  //Relaciones
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String         @id @default(uuid())
  email                     String         @unique
  password                  String
  name                      String
  birthdate                 DateTime?
  language                  String?        @default("indeterminado")
  timezone                  String?        @default("UTC")
  phone                     String?        @default("sin_telefono")
  username                  String         @unique @default("default_username")
  status                    UserStatus     @default(ACTIVE)
  role                      Role           @default(USER)
  lastLoginAt               DateTime?
  lastLoginIp               String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @default(now()) @updatedAt
  verified                  Boolean        @default(false)
  verifyToken               String?
  verifyTokenExpires        DateTime?
  avatarUrl                  String?
  passwordChangedAt         DateTime?
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?  

  // Relaciones inversas
  products                  Product[]
  orders                    Order[]  
  refreshTokens             RefreshToken[]
  clients                   Client[]
}
 
model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
  // Clave foránea
  userId         String  
  
  // Relación inversa
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderProducts OrderProduct[]
}

model OrderProduct {
  id          String   @id @default(uuid())
  quantity    Int      @default(1)
  price       Float  

  //clave foranea
  productId   String
  orderId     String

  //Relaciones
  product    Product  @relation(fields: [productId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id])
}

model Client {
  id          String      @id @default(uuid())
  name        String
  email       String?     @unique
  phone       String?
  address     String?
  ruc         String?     @unique
  dni         String?     @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Clave foránea
  userId      String
  
  // Relaciones
  user        User            @relation(fields: [userId], references: [id], onDelete: SetNull)
  orders      Order[]
}

model Order {
  id          String          @id @default(uuid())  
  totalAmount Float
  status      SaleStatus      @default(COMPLETED)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  //clave foranea
  userId      String
  clientId    String
  
  // Relaciones
  user        User            @relation(fields: [userId], references: [id], onDelete: SetNull)  
  client      Client          @relation(fields: [clientId], references: [id], onDelete: SetNull)
  orderProducts    OrderProduct[]
  services    Service[]  
}

model Service {
  id              String          @id @default(uuid())
  type            ServiceType     @default(REPAIR)
  status          ServiceStatus   @default(IN_PROGRESS)
  name            String
  description     String
  photoUrls       String[]        @default([])
  price           Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  //clave foranea
  orderId         String
  
  // Relaciones
  order            Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum SaleStatus {
  COMPLETED
  CANCELLED
  PENDING
}

enum ServiceStatus {
  IN_PROGRESS   // En proceso
  COMPLETED     // Completado
  DELIVERED     // Entregado
  PAID          // Pagado
}

enum ServiceType {
  REPAIR
  WARRANTY
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}
